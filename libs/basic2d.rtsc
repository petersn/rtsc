# Basic 2d library.

import opengl, os

self.width  = 640
self.height = 480

textures = {}
keys_held = {}

class Point
	self.x = 0
	self.y = 0

	def __init__(x, y)
		self.x = x
		self.y = y

class Sprite
	subclass Point

	def __init__()
		error("Don't instantiate Sprite directly!")

__inline_javascript__
	var RTSC_callback_dict = {};
	_RTSC_class_Sprite.prototype.RTSC__autofunc_on = function() {
		var obj = arguments[0];
		var callback = arguments[1];
		var keywords = Array.prototype.slice.call(arguments, 2);
		if (RTSC_callback_dict[keywords] === undefined)
			RTSC_callback_dict[keywords] = [];
		RTSC_callback_dict[keywords].push( [obj, callback] );
	}

def process_events()
	while true
		ev = opengl.poll()
		if ev == 0
			break
		if ev.type == "quit" or (ev.type == "key-down" and ev.key == "escape")
			opengl.quit()
			os.exit()
		if ev.type == "key-down"
			keys_held[ev.key] = true
		if ev.type == "key-up"
			keys_held[ev.key] = false

def draw_image(path, x, y)
	if not textures.contains(path)
		textures[path] = opengl.load_image_from_string(_load_fs_string(path))
	opengl.draw_texture(textures[path], x, y)

def mainloop()
	while true
		process_events()
		for key, value in keys_held
			if key != "RTSC_contains" and keys_held[key]
				for obj in callback_dict[["key", "held"]]
					__inline_javascript__
						RTSC_obj[1].call(RTSC_obj[0], { "key" : RTSC_key });
		opengl.begin_frame()
		for obj in object_lists[Sprite]
			draw_image(obj.image, obj.x, obj.y)
		opengl.end_frame()

def main()
	opengl.launch(self.width, self.height)
	mainloop()

expose Sprite, main

